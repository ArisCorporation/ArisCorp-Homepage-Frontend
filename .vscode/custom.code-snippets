{
  // Place your ArisCorp-Homepage-Frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "New React Page": {
    "prefix": "RP",
    "body": [
			"export default function ${1:name}($2) => {",
			"  return (",
			"    <div>",
			"      $3",
			"    </div>",
			"  )",
			"};",
			""
			],
    "description": "New basic React Page"
  },

	"New React Page CSR": {
    "prefix": "RPC",
    "body": [
			"const { useQuery } = require('@apollo/client')",
			"import { GET_${3:QUERY} } from 'graphql/queries'",
			"import { SquareLoader } from 'react-spinners'",
			"",
			"export default function ${1:name}($2) {",
			"",
			"  const { loading, error, data } = useQuery(GET_${3:QUERY})",
			"",
			"  if (loading)",
			"    return (",
			"      <div className='flex justify-center pt-32'>",
			"        <SquareLoader color='#00ffe8' speedMultiplier={'0.8'} loading={loading} />",
			"      </div>",
			"  )",
			"",
			"  if (error) return <p>Error :(</p>",
			"",
			"  return (",
			"    <div>",
			"      $4",
			"    </div>",
			"  )",
			"}",
			"",
			"${1:name}.getLayout = function getLayout(page) {",
			"  return <Layout>{page}</Layout>",
			"}",
			"",
			],
    "description": "New client-side React Page"
  },

	"New React Page CSR - Layout: Index": {
    "prefix": "RPCI",
    "body": [
			"import Layout from 'pages/layout'",
			"const { useQuery } = require('@apollo/client')",
			"import { GET_${3:QUERY} } from 'graphql/queries'",
			"import { SquareLoader } from 'react-spinners'",
			"",
			"export default function ${1:name}($2) {",
			"",
			"  const { loading, error, data } = useQuery(GET_${3:QUERY})",
			"",
			"  if (loading)",
			"    return (",
			"      <div className='flex justify-center pt-32'>",
			"        <SquareLoader color='#00ffe8' speedMultiplier={'0.8'} loading={loading} />",
			"      </div>",
			"  )",
			"",
			"  if (error) return <p>Error :(</p>",
			"",
			"  return (",
			"    <div>",
			"      $4",
			"    </div>",
			"  )",
			"}",
			"",
			"${1:name}.getLayout = function getLayout(page) {",
			"  return <Layout>{page}</Layout>",
			"}",
			"",
			],
    "description": "New client-side React Page with Index Layout"
  },

	"New React Page CSR - Layout: VerseExkurs": {
    "prefix": "RPCV",
    "body": [
			"import Layout from 'pages/VerseExkurs/layout'",
			"const { useQuery } = require('@apollo/client')",
			"import { GET_${3:QUERY} } from 'graphql/queries'",
			"import { SquareLoader } from 'react-spinners'",
			"",
			"export default function ${1:name}($2) {",
			"",
			"  const { loading, error, data } = useQuery(GET_${3:QUERY})",
			"",
			"  if (loading)",
			"    return (",
			"      <div className='flex justify-center pt-32'>",
			"        <SquareLoader color='#00ffe8' speedMultiplier={'0.8'} loading={loading} />",
			"      </div>",
			"  )",
			"",
			"  if (error) return <p>Error :(</p>",
			"",
			"  return (",
			"    <div>",
			"      $4",
			"    </div>",
			"  )",
			"}",
			"",
			"${1:name}.getLayout = function getLayout(page) {",
			"  return <Layout>{page}</Layout>",
			"}",
			"",
			],
    "description": "New client-side React Page with VE Layout"
  },

	"New React Page SSR": {
    "prefix": "RPS",
    "body": [
			"import client from 'apollo/clients'",
			"import { GET_${3:QUERY} } from 'graphql/queries'",
			"",
			"export async function getServerSideProps() {",
			"  const { data } = await client.query({",
			"    query: GET_${3:QUERY},",
			"  })",
			"",
			"  if (!data) {",
			"    return {",
			"      notFound: true,",
			"    }",
			"  }",
			"",
			"  return {",
			"    props: {",
			"      data: await data.$4,",
			"    },",
			"  }",
			"}",
			"",
			"export default function ${1:name}($2) {",
			"",
			"  return (",
			"    <div>",
			"      $5",
			"    </div>",
			"  )",
			"}",
			"",
			"${1:name}.getLayout = function getLayout(page) {",
			"  return <Layout>{page}</Layout>",
			"}",
			"",
			],
    "description": "New server-side React Page"
  },

	"New React Page SSR - Layout: index": {
    "prefix": "RPSI",
    "body": [
			"import Layout from 'pages/layout'",
			"import client from 'apollo/clients'",
			"import { GET_${3:QUERY} } from 'graphql/queries'",
			"",
			"export async function getServerSideProps() {",
			"  const { data } = await client.query({",
			"    query: GET_${3:QUERY},",
			"  })",
			"",
			"  if (!data) {",
			"    return {",
			"      notFound: true,",
			"    }",
			"  }",
			"",
			"  return {",
			"    props: {",
			"      data: await data.$4,",
			"    },",
			"  }",
			"}",
			"",
			"export default function ${1:name}($2) {",
			"",
			"  return (",
			"    <div>",
			"      $5",
			"    </div>",
			"  )",
			"}",
			"",
			"${1:name}.getLayout = function getLayout(page) {",
			"  return <Layout>{page}</Layout>",
			"}",
			"",
			],
    "description": "New server-side React Page with index layout"
  },

	"New React Page SSR - Layout: VerseExkurs": {
    "prefix": "RPSV",
    "body": [
			"import Layout from 'pages/VerseExkurs/layout'",
			"import client from 'apollo/clients'",
			"import { GET_${3:QUERY} } from 'graphql/queries'",
			"",
			"export async function getServerSideProps() {",
			"  const { data } = await client.query({",
			"    query: GET_${3:QUERY},",
			"  })",
			"",
			"  if (!data) {",
			"    return {",
			"      notFound: true,",
			"    }",
			"  }",
			"",
			"  return {",
			"    props: {",
			"      data: await data.$4,",
			"    },",
			"  }",
			"}",
			"",
			"export default function ${1:name}($2) {",
			"",
			"  return (",
			"    <div>",
			"      $5",
			"    </div>",
			"  )",
			"}",
			"",
			"${1:name}.getLayout = function getLayout(page) {",
			"  return <Layout>{page}</Layout>",
			"}",
			"",
			],
    "description": "New server-side React Page with VerseExkurs layout"
  },

  "New React Component": {
    "prefix": "RC",
    "body": [
			"const ${1:name} = ($2) => {",
			"  return (",
			"    <div>",
			"      $3",
			"    </div>",
			"  )",
			"}",
			"",
			"export default ${1:name}",
			""
			],
    "description": "New React Component"
	},

	"Import React Markdown": {
    "prefix": "importrmd",
    "body": [
			"import ReactMarkdown from 'react-markdown'",
			"import rehypeRaw from 'rehype-raw'",
			],
    "description": "Import React Markdown"
	},

	"Create React Markdown": {
    "prefix": "rmd",
    "body": [
			"<ReactMarkdown",
			"  rehypePlugins={[rehypeRaw]}",
			"  className='mx-auto prose prose-td:align-middle prose-invert xl:max-w-full'",
			">",
			"  $1",
			"</ReactMarkdown>",
			],
    "description": "Create React Markdown"
	},
}
